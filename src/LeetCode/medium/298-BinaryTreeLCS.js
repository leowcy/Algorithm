// Binary tree longest consecutive sequence
/**
 * 
 * @param {*} root 
 * Searching for longest consecutive sequence from top to bottom. 
 * A consecutive sequence is made up by the parent node's value less than its child node's value by exactly by 1. 
 * And this child node can either be its left or right child. Meanwhile, the longest consecutive sequence can 
 * either be generated by a sequence ending at current node or spanning into child nodes or only by child nodes. 
 * Hence we should return the largest value among those three possibilities.
 */

var findLCS = function (root) {
    let pathLength = 0;
    let LCS = (root) => {
        if (!root) return 0;

        // max represents the path length of the current node
        let max = 1;
        // find the left and right child possible max path length
        let left = LCS(root.left);
        let right = LCS(root.right);

        if (root.left == null || root.left.val == root.val + 1) {
            max = Math.max(left + 1, max);
        }
        if (root.right == null || root.right.val == root.val + 1) {
            max = Math.max(right + 1, max);
        }

        pathLength = Math.max(pathLength, max);
        return max;
    }

    LCS(root);
    return pathLength;
}